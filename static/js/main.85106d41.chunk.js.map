{"version":3,"sources":["components/Book.jsx","components/Bookshelf.jsx","api/BooksAPI.js","App.jsx","index.js"],"names":["Book","handleChange","event","shelfName","target","value","props","updateShelf","book","this","image","imageLinks","thumbnail","className","style","width","height","backgroundImage","shelf","onChange","disabled","title","authors","join","Component","Bookshelf","onUpdateShelf","books","filterBooks","id","map","api","token","localStorage","Math","random","toString","substr","headers","update","fetch","method","body","JSON","stringify","then","res","json","BooksApp","state","showSearchPage","filterByBookshelf","filter","bookToUpdate","newShelf","setState","oldState","BooksAPI","data","response","onClick","type","placeholder","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.85106d41.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Book extends Component {\n\n  //const {title, authors, status, imageUrl} = this.props;\n  handleChange = (event) => {\n    let shelfName = event.target.value;\n    this.props.updateShelf(this.props.book, shelfName)\n  }\n\n  render() {\n    const { book } = this.props;\n    const image = book.imageLinks.thumbnail;\n    return (\n      <div className=\"book\">\n        <div className=\"book-top\">\n          <div className=\"book-cover\" style={{ \n            width: 128, \n            height: 193, \n            backgroundImage: `url(${ image })` \n          }}></div>\n          <div className=\"book-shelf-changer\">\n            <select value = {book.shelf} onChange = { this.handleChange }>\n              <option value=\"move\" disabled>Move to...</option>\n              <option value=\"currentlyReading\">Currently Reading</option>\n              <option value=\"wantToRead\">Want to Read</option>\n              <option value=\"read\">Read</option>\n              <option value=\"none\">None</option>\n            </select>\n          </div>\n        </div>\n        <div className=\"book-title\">{ book.title }</div>\n        <div className=\"book-authors\">{ book.authors.join(', ') }</div>\n      </div>\n    );\n  }\n}\n\nexport default Book;","import React, { Component } from 'react';\nimport Book from './Book';\n\nclass Bookshelf extends Component {\n\n    onUpdateShelf = (book, shelfName) => {\n        this.props.updateShelf(book, shelfName)\n    }\n\n    render() {\n        const { shelf, filterBooks } = this.props;\n        const books = filterBooks(shelf.id);\n        return (\n            <div className=\"bookshelf\">\n                <h2 className=\"bookshelf-title\">{shelf.title}</h2>\n                <div className=\"bookshelf-books\">\n                    <ol className=\"books-grid\">\n                        {\n                            books.map(book => (\n                                <li key = { book.id }>\n                                    <Book \n                                        book = { book }\n                                        updateShelf = { this.onUpdateShelf }/>\n                                </li>\n                            ))\n                        }\n                    </ol>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Bookshelf;","\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from 'react';\nimport Bookshelf from './components/Bookshelf';\nimport * as BooksAPI from './api/BooksAPI';\nimport './App.css';\n\nclass BooksApp extends React.Component {\n\n    state = {\n            /**\n             * TODO: Instead of using this state variable to keep track of which page\n             * we're on, use the URL in the browser's address bar. This will ensure that\n             * users can use the browser's back and forward buttons to navigate between\n             * pages, as well as provide a good URL they can bookmark and share.\n             */\n        books: [],\n        showSearchPage: false\n    }\n\n    filterByBookshelf = (shelf) => {\n        return this.state.books.filter( book => book.shelf === shelf )\n    }\n\n    updateShelf = (bookToUpdate, newShelf) => {\n        this.setState(oldState => ({\n            books: oldState.books.map( book => book.id === bookToUpdate.id ? { ...book, shelf:newShelf } : book )\n        }))\n\n        BooksAPI.update(bookToUpdate, newShelf);\n    }\n\n    componentDidMount(){\n        BooksAPI.getAll().then((response) => {\n            this.setState({books : response})\n        })\n    }\n\n    render() {\n\n        const bookshelves = [\n            {\"title\":'Currently Reading', \"id\":\"currentlyReading\"},\n            {\"title\":'Want to Read', \"id\":\"wantToRead\"}, \n            {\"title\":'Read', \"id\":\"read\" }\n        ];\n\n        return (\n            <div className=\"app\">\n                {this.state.showSearchPage ? (\n                    <div className=\"search-books\">\n                        <div className=\"search-books-bar\">\n                            <button className=\"close-search\" onClick={() => this.setState({ showSearchPage: false })}>Close</button>\n                            <div className=\"search-books-input-wrapper\">\n                                {/*\n                  NOTES: The search from BooksAPI is limited to a particular set of search terms.\n                  You can find these search terms here:\n                  https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\n\n                  However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\n                  you don't find a specific author or title. Every search is limited by search terms.\n                */}\n                                <input type=\"text\" placeholder=\"Search by title or author\" />\n\n                            </div>\n                        </div>\n                        <div className=\"search-books-results\">\n                            <ol className=\"books-grid\"></ol>\n                        </div>\n                    </div>\n                ) : (\n                    <div className=\"list-books\">\n                        <div className=\"list-books-title\">\n                            <h1>MyReads</h1>\n                        </div>\n                        <div className=\"list-books-content\">\n                            <div>\n                            {\n                                bookshelves.map( shelf => (\n                                    <Bookshelf \n                                        key = { shelf.id } \n                                        shelf = { shelf }\n                                        filterBooks = { this.filterByBookshelf }\n                                        updateShelf = { this.updateShelf }\n                                    />\n                                ))\n                            }\n                            </div>\n                        </div>\n                        <div className=\"open-search\">\n                            <button onClick={() => this.setState({ showSearchPage: true })}>Add a book</button>\n                        </div>\n                    </div>\n                )}\n            </div>\n        )\n    }\n}\n\nexport default BooksApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />,document.getElementById('root'));\n"],"sourceRoot":""}