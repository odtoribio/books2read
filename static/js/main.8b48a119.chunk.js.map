{"version":3,"sources":["components/Book.jsx","api/BooksAPI.js","components/SearchBooks.jsx","components/Bookshelf.jsx","components/ListBookshelves.jsx","App.jsx","index.js"],"names":["Book","handleChange","event","shelfName","target","value","props","updateShelf","book","this","image","imageLinks","thumbnail","className","style","width","height","backgroundImage","shelf","onChange","disabled","title","authors","join","Component","api","token","localStorage","Math","random","toString","substr","headers","update","fetch","id","method","body","JSON","stringify","then","res","json","SearchBooks","state","books","searchText","handleTextInput","text","setState","clearTimeout","typingTimeout","setTimeout","query","data","result","prevState","Array","isArray","onUpdateShelf","bookToUpdate","newShelf","oldState","map","BooksAPI","console","log","to","type","placeholder","Bookshelf","filterBooks","ListBookshelves","filterByBookshelf","filter","response","BooksApp","exact","path","component","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8b48a119.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Book extends Component {\n\n  handleChange = ( event ) => {\n    let shelfName = event.target.value;\n    this.props.updateShelf( this.props.book, shelfName )\n  }\n\n  render() {\n\n    const { book } = this.props;\n    const image = book.imageLinks.thumbnail;\n    \n    return (\n      <div className=\"book\">\n        <div className=\"book-top\">\n          <div className=\"book-cover\" style={{ \n            width: 128, \n            height: 193, \n            backgroundImage: `url(${ image })` \n          }}></div>\n          <div className=\"book-shelf-changer\">\n            <select value={ book.shelf || 'none' } onChange = { this.handleChange }>\n              <option value=\"move\" disabled>Move to...</option>\n              <option value=\"currentlyReading\">Currently Reading</option>\n              <option value=\"wantToRead\">Want to Read</option>\n              <option value=\"read\">Read</option>\n              <option value=\"none\">None</option>\n            </select>\n          </div>\n        </div>\n        <div className=\"book-title\">{ book.title }</div>\n        <div className=\"book-authors\">{ book.authors ? book.authors.join(', ') : '' }</div>\n      </div>\n    );\n  }\n}\n\nexport default Book;\n","\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Book from './Book';\nimport * as BooksAPI from '../api/BooksAPI';\n\nclass SearchBooks extends Component {\n\n    constructor(props){\n        super(props);\n        this.typingTimeout = null;\n    }\n\n    state = {\n        books: [],\n        searchText:''\n    }\n\n    handleTextInput = ( event ) => {\n        const text = event.target.value;\n        this.setState({ searchText: text || '' });\n        clearTimeout(this.typingTimeout);\n        this.typingTimeout = setTimeout(()=> {\n            BooksAPI.search(text)\n                .then( result => {\n                    this.setState( prevState => ({\n                        books: Array.isArray(result) ? result : []\n                    }));\n                })\n        },1000)\n    }\n\n    onUpdateShelf = (bookToUpdate, newShelf) => {\n        this.setState( oldState => ({\n            books: oldState.books.map( book => book.id === bookToUpdate.id ? { ...book, shelf:newShelf } : book )\n        }))\n\n        BooksAPI.update(bookToUpdate, newShelf);\n    }\n\n    render(){\n        console.log(\"libros\", this.state.books);\n        return(\n            <div className=\"search-books\">\n                <div className=\"search-books-bar\">\n                    <Link to='/'>\n                        <button className=\"close-search\">Close</button>\n                    </Link>\n                    <div className=\"search-books-input-wrapper\">\n                        <input type=\"text\" placeholder=\"Search by title or author\" value={ this.state.searchText } onChange={ this.handleTextInput }/>\n                    </div>\n                </div>\n                <div className=\"search-books-results\">\n                    <ol className=\"books-grid\">\n                        {\n                            this.state.books.map( book => (\n                                <li key = { book.id }>\n                                    <Book \n                                        book = { book }\n                                        updateShelf = { this.onUpdateShelf }/>\n                                </li>\n                            ))\n                        }\n                    </ol>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SearchBooks;\n","import React, { Component } from 'react';\nimport Book from './Book';\n\nclass Bookshelf extends Component {\n\n    onUpdateShelf = ( book, shelfName ) => {\n        this.props.updateShelf( book, shelfName )\n    }\n\n    render() {\n        const { shelf, filterBooks } = this.props;\n        const books = filterBooks( shelf.id );\n        return (\n            <div className=\"bookshelf\">\n                <h2 className=\"bookshelf-title\">{ shelf.title }</h2>\n                <div className=\"bookshelf-books\">\n                    <ol className=\"books-grid\">\n                        {\n                            books.map( book => (\n                                <li key = { book.id }>\n                                    <Book \n                                        book = { book }\n                                        updateShelf = { this.onUpdateShelf }/>\n                                </li>\n                            ))\n                        }\n                    </ol>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Bookshelf;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Bookshelf from './Bookshelf';\nimport * as BooksAPI from '../api/BooksAPI';\n\nclass ListBookshelves extends Component {\n\n    state = {\n        books: []\n    }\n\n    filterByBookshelf = (shelf) => {\n        return this.state.books.filter( book => book.shelf === shelf )\n    }\n\n    updateShelf = (bookToUpdate, newShelf) => {\n        this.setState(oldState => ({\n            books: oldState.books.map( book => book.id === bookToUpdate.id ? { ...book, shelf:newShelf } : book )\n        }))\n\n        BooksAPI.update(bookToUpdate, newShelf);\n    }\n\n    componentDidMount(){\n        BooksAPI.getAll().then((response) => {\n            this.setState({books : response})\n        })\n    }\n\n    render(){\n\n        const bookshelves = [\n            {\"title\":'Currently Reading', \"id\":\"currentlyReading\"},\n            {\"title\":'Want to Read', \"id\":\"wantToRead\"}, \n            {\"title\":'Read', \"id\":\"read\" }\n        ];\n\n        return(\n            <div className=\"list-books\">\n                <div className=\"list-books-title\">\n                    <h1>MyReads</h1>\n                </div>\n                <div className=\"list-books-content\">\n                    <div>\n                    {\n                        bookshelves.map( shelf => (\n                            <Bookshelf \n                                key = { shelf.id } \n                                shelf = { shelf }\n                                filterBooks = { this.filterByBookshelf }\n                                updateShelf = { this.updateShelf }\n                            />\n                        ))\n                    }\n                    </div>\n                </div>\n                <Link\n                    to=\"/search\"\n                    className=\"open-search\"\n                >\n                    <button>Add a book</button>\n                </Link>\n            </div>\n        );\n    }\n}\n\nexport default ListBookshelves;","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport SearchBooks from './components/SearchBooks';\nimport ListBookshelves from './components/ListBookshelves';\nimport './App.css';\n\nclass BooksApp extends React.Component {\n\n    render() {\n\n        return (\n            <div className=\"app\">\n                <Route exact path='/books2read' component= { ListBookshelves }/>\n                <Route path='/books2read/search' component={ SearchBooks }/>\n            </div>\n        )\n    }\n}\n\nexport default BooksApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n    ,document.getElementById('root')\n);\n"],"sourceRoot":""}