{"version":3,"sources":["components/Book.js","api/BooksAPI.js","components/SearchBooks.js","components/Bookshelf.js","components/BookShelves.js","App.js","index.js"],"names":["Book","props","book","image","imageLinks","thumbnail","className","style","width","height","backgroundImage","value","shelf","onChange","event","shelfName","target","updateShelf","disabled","title","authors","join","api","token","localStorage","Math","random","toString","substr","headers","getAll","fetch","then","res","json","data","books","update","id","method","body","JSON","stringify","SearchBooks","state","searchText","handleTextInput","text","setState","clearTimeout","typingTimeout","setTimeout","searchBooks","cleanBookList","query","searchResult","result","Array","isArray","length","forEach","parentStateBook","push","bookToUpdate","newShelf","oldState","map","BooksAPI","to","type","placeholder","this","Component","Bookshelf","filterBooks","onUpdateShelf","BookShelves","filterByBookshelf","BooksApp","componentDidMount","console","log","response","filter","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.09ab585e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Book = ( props ) => {\n\n  const { book } = props;\n  const image = book.imageLinks ? book.imageLinks.thumbnail : '';\n\n  const handleChange = ( event ) => {\n    let shelfName = event.target.value;\n    props.updateShelf( book, shelfName )\n  }\n  \n  return (\n    <div className=\"book\">\n      <div className=\"book-top\">\n        <div className=\"book-cover\" style={{ \n          width: 128, \n          height: 193, \n          backgroundImage: `url(${ image })` \n        }}></div>\n        <div className=\"book-shelf-changer\">\n          <select value={ book.shelf || 'none' } onChange = { handleChange }>\n            <option value=\"move\" disabled>Move to...</option>\n            <option value=\"currentlyReading\">Currently Reading</option>\n            <option value=\"wantToRead\">Want to Read</option>\n            <option value=\"read\">Read</option>\n            <option value=\"none\">None</option>\n          </select>\n        </div>\n      </div>\n      <div className=\"book-title\">{ book.title }</div>\n      <div className=\"book-authors\">{ book.authors ? book.authors.join(', ') : '' }</div>\n    </div>\n  );\n\n}\n\nBook.propTypes = {\n  book: PropTypes.object.isRequired,\n  updateShelf: PropTypes.func.isRequired\n}\n\nexport default Book;\n","\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Book from './Book';\nimport * as BooksAPI from '../api/BooksAPI';\nimport PropTypes from 'prop-types';\n\nclass SearchBooks extends Component {\n\n    constructor(props){\n        super(props);\n        this.typingTimeout = null;\n    }\n\n    state = {\n        books:[],\n        searchText:'',\n    }\n\n    handleTextInput = ( event ) => {\n        const text = event.target.value;\n        this.setState({ searchText: text || '' });\n        clearTimeout(this.typingTimeout);\n        this.typingTimeout = setTimeout(()=> {\n            if (text){\n                this.searchBooks(text);\n            }else{\n                this.cleanBookList()\n            }\n        },1000)\n    }\n\n    searchBooks = ( text ) => {\n        const searchResult = [];\n\n        BooksAPI.search( text )\n            .then( result => {\n                if(Array.isArray(result) && result.length > 0 ){\n                    result.forEach( book => {\n                        this.props.books.forEach( parentStateBook => {\n                            if (book.id === parentStateBook.id){\n                                book['shelf'] = parentStateBook.shelf;\n                            }\n                        })\n                        searchResult.push(book);\n                    })\n                }\n            })\n            .then(() => {\n                this.setState({books : searchResult});\n            })\n    }\n\n    cleanBookList = () =>{\n        this.setState({books: []});\n    }\n\n    updateShelf = (bookToUpdate, newShelf) => {\n        this.setState( oldState => ({\n            books: oldState.books.map( book => book.id === bookToUpdate.id ? { ...book, shelf: newShelf } : book )\n        }))\n\n        BooksAPI.update(bookToUpdate, newShelf);\n    }\n\n    render(){\n        return(\n            <div className=\"search-books\">\n                <div className=\"search-books-bar\">\n                    <Link to='/books2read'>\n                        <button className=\"close-search\">Close</button>\n                    </Link>\n                    <div className=\"search-books-input-wrapper\">\n                        <input type=\"text\" placeholder=\"Search by title or author\" value={ this.state.searchText } onChange={ this.handleTextInput }/>\n                    </div>\n                </div>\n                <div className=\"search-books-results\">\n                    <ol className=\"books-grid\">\n                        {\n                            this.state.books.map( book => (\n                                <li key = { book.id }>\n                                    <Book \n                                        book = { book }\n                                        updateShelf = { this.updateShelf }/>\n                                </li>\n                            ))\n                        }\n                    </ol>\n                </div>\n            </div>\n        )\n    }\n}\n\nSearchBooks.propTypes = {\n    books: PropTypes.array.isRequired\n}\n\nexport default SearchBooks;\n","import React from 'react';\nimport Book from './Book';\nimport PropTypes from 'prop-types';\n\nconst Bookshelf = ( props ) =>  {\n\n    const { shelf, filterBooks } = props;\n    const books = filterBooks( shelf.id );\n\n    const onUpdateShelf = ( book, shelfName ) => {\n        props.updateShelf( book, shelfName )\n    }\n \n    return (\n        <div className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">{ shelf.title }</h2>\n            <div className=\"bookshelf-books\">\n                <ol className=\"books-grid\">\n                    {\n                        books.map( book => (\n                            <li key = { book.id }>\n                                <Book \n                                    book = { book }\n                                    updateShelf = { onUpdateShelf }/>\n                            </li>\n                        ))\n                    }\n                </ol>\n            </div>\n        </div>\n    );\n}\n\nBookshelf.propTypes = {\n    shelf: PropTypes.object.isRequired,\n    filterBooks: PropTypes.func.isRequired,\n    updateShelf: PropTypes.func.isRequired\n}\n\nexport default Bookshelf;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Bookshelf from './Bookshelf';\nimport PropTypes from 'prop-types';\n\nconst BookShelves = (props) => {\n\n    const bookshelves = [\n        { \"title\": 'Currently Reading', \"id\": \"currentlyReading\" },\n        { \"title\": 'Want to Read', \"id\": \"wantToRead\" },\n        { \"title\": 'Read', \"id\": \"read\" }\n    ];\n\n    return (\n        <div className=\"list-books\">\n            <div className=\"list-books-title\">\n                <h1>MyReads</h1>\n            </div>\n            <div className=\"list-books-content\">\n                <div>\n                    {\n                        bookshelves.map(shelf => (\n                            <Bookshelf\n                                key={shelf.id}\n                                shelf={shelf}\n                                filterBooks={props.filterByBookshelf}\n                                updateShelf={props.updateShelf}\n                            />\n                        ))\n                    }\n                </div>\n            </div>\n            <Link\n                to=\"/books2read/search\"\n                className=\"open-search\"\n            >\n                <button>Add a book</button>\n            </Link>\n        </div>\n    )\n    \n}\n\nBookShelves.propTypes = {\n    filterByBookshelf: PropTypes.func.isRequired,\n    updateShelf: PropTypes.func.isRequired\n}\n\nexport default BookShelves;\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport SearchBooks from './components/SearchBooks';\nimport BookShelves from './components/BookShelves';\nimport * as BooksAPI from './api/BooksAPI';\nimport './App.css';\n\nclass BooksApp extends Component {\n\n    state = {\n        books: []\n    }\n\n    componentDidMount = () => {\n        console.log('component did mount');\n        BooksAPI.getAll().then((response) => {\n            this.setState({books : response})\n        })\n    }\n\n    filterByBookshelf = (shelf) => {\n        return this.state.books.filter( book => book.shelf === shelf )\n    }\n\n    updateShelf = (bookToUpdate, newShelf) => {\n        this.setState( oldState => ({\n            books: oldState.books.map( book => book.id === bookToUpdate.id ? { ...book, shelf: newShelf } : book )\n        }))\n\n        BooksAPI.update(bookToUpdate, newShelf);\n    }\n\n    render(){\n\n\n        return (\n            <div className=\"app\">\n                <Route exact path='/books2read' component = { () => <BookShelves \n                    filterByBookshelf={ this.filterByBookshelf }\n                    updateShelf={ this.updateShelf }\n                />}/>\n                <Route path='/books2read/search' component={ () => <SearchBooks \n                    books = {this.state.books}\n                /> }/>\n            </div>\n        )\n    }\n}\n\nexport default BooksApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n    ,document.getElementById('root')\n);\n"],"sourceRoot":""}